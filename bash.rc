#!/bin/sh


export EDITOR="nvim"
export VISUAL="nvim"
export GPG_TTY=$(tty)
export FCEDIT=$EDITOR
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PATH=$PATH:/usr/local/go/bin:$HOME/.scripts:/opt/homebrew/bin:$HOME/.local/bin:$HOME/.local/google-cloud-sdk/bin
export BASH_SILENCE_DEPRECATION_WARNING=1

# Upvest specifi
export GOPRIVATE=github.com/toknapp/*
export GOPROXY=http://goproxy.upvest.io:8080
export GONOSUMDB=github.com/toknapp/*

HISTCONTROL=ignorespace

set -o vi

# Linux only
# change caps to escape
# setxkbmap -option caps:escape

# if nvim is installed, set it as MANPAGER
if command -v nvim 1>/dev/null 2>&1; then
    export MANPAGER='nvim +Man!'
    export MANWIDTH=999
fi

# Codi
# Usage: codi [filetype] [filename]
codi() {
  local syntax="${1:-python}"
  shift
  vim -c \
    "let g:startify_disable_at_vimenter = 1 |\
    set bt=nofile ls=0 noru nonu nornu |\
    hi ColorColumn ctermbg=NONE |\
    hi VertSplit ctermbg=NONE |\
    hi NonText ctermfg=0 |\
    Codi $syntax" "$@"
}

set -o noclobber
#set -o vi

gcb(){
    echo `git rev-parse --abbrev-ref HEAD 2>/dev/null`
}

git_branch() {
    git branch 2>/dev/null 1>&2 && echo "- ( `gcb``git diff --quiet || echo ' *'` )"
}


[[ -f $HOME/.aliases ]] && source $HOME/.aliases
[[ -f $HOME/.fzf_scripts ]] && source $HOME/.fzf_scripts
if [ -n "$RANGER_LEVEL" ]; then export PS1="[ranger]$PS1"; fi

# NVM -- Node Version Manager
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

set_prompt() {
    # Custom PS1
    # export PS1="╭─[ \u :: \h ] @ [ \e[33m\W\e[0m ]\$(git_branch)\n╰─➤➤  "
	local reset="\e[0m";
	local black="\e[1;30m";
	local blue="\e[1;34m";
	local cyan="\e[1;36m";
	local green="\e[0;32m";
	local orange="\e[1;33m";
	local purple="\e[1;35m";
	local red="\e[1;31m";
	local violet="\e[1;35m";
	local white="\e[1;37m";
	local yellow="\e[1;33m";
    #export PS1="\w ${green}\$(git_branch)${reset} \n ⬤  ${yellow}⬤  ${blue}⬤ ${reset} "
    export PS1="\w \e[0;32m\$(git_branch)\e[0m \n ⬤  "
}

set_prompt


function activatesandbox(){
    aws eks update-kubeconfig --name $1-aws-ib-sandbox --region us-east-2 --profile=ib-sandbox-user --kubeconfig=tmp
}


# FZF settings
FZF_DEFAULT_OPTS="--extended -i --height=50% --layout=default"
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# hook up direnv
if command -v direnv 1>/dev/null 2>&1; then
    eval "$(direnv hook bash)"
fi

# enable bash completion
if [ "$(uname)" == "Darwin" ]; then
    export BASH_COMPLETION_COMPAT_DIR="/usr/local/etc/bash_completion.d"
    [[ -r "/usr/local/etc/profile.d/bash_completion.sh"  ]] && . "/usr/local/etc/profile.d/bash_completion.sh"
else
    [[ -f /usr/share/bash-completion/bash_completion ]] && . /usr/share/bash-completion/bash_completion
fi

# enable bash completion for kubectl alias
#source <(kubectl completion bash | sed 's/kubectl/kc/g')
#complete -F __start_kubectl kc


#eval "$(pyenv init -)"
#eval "$(pyenv virtualenv-init -)"

# append nodejs path and init nodenv
#eval "$(nodenv init -)"
#export PATH="/usr/local/bin/nodejs/node-v16.13.2-darwin-x64/bin/node:$PATH"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/oli/google-cloud-sdk/path.bash.inc' ]; then . '/Users/oli/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/oli/google-cloud-sdk/completion.bash.inc' ]; then . '/Users/oli/google-cloud-sdk/completion.bash.inc'; fi
export PATH="/opt/homebrew/bin:$PATH"

# Disable history for the obvious reasons (Upvest)
unset HISTFILE
